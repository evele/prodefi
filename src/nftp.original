// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/utils/cryptography/EIP712.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract NFTPrediction is ERC721, ERC721Enumerable, ERC721URIStorage, Pausable, Ownable, ERC721Burnable, EIP712 {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;

    constructor() ERC721("NFTPrediction", "NFT") EIP712("NFTPrediction", "1") {}

    function _baseURI() internal pure override returns (string memory) {
        return "prodero.com";
    }

    bool mintEnabled;

    uint8 immutable TOTAL_GAMES  = 24; 
    uint8 immutable LOCAL = 0;
    uint8 immutable EMPATE = 1;
    uint8 immutable VISITANTE = 2;

    uint256 public publicPrice = 1 ether; // TODO: update price... use a stable price
    
    mapping (address => bool) allowList; // TODO: to use it in some promo

    struct Game {
        uint8 id; //will be here too, just to be easy to return (I think)
        uint8 team1;
        uint8 team2;
        uint8[2] result;
        bool set;
    } 

    mapping(uint8 => Game) public games;  // game_ids -> game .. to register all the results from the oracla, first manually


    /* 10 points per team
       3 fourth -- not for now
       4 third
       6 second
       9 first
    */
    uint8[3] public winners; // to set real winners

    mapping(uint256 => uint8[3]) winnersPredictions; // token ID -> array of 4 team ids 


    mapping(uint256 => Game[]) predictions; // token ID -> prediction (Game[])

    uint256[] public positions; // array of token IDs ordered from higher to lower

    uint256 immutable MAX_INT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;


    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function safeMint(address to, string memory uri, Game[] memory _prediction) public onlyOwner {
        require(mintEnabled,"Minting its not allowed");
        require(_prediction.length == TOTAL_GAMES, "There should be a prediction for each game");
        uint256 tokenId = _tokenIdCounter.current();
        _safeMint(to, tokenId);
        for (uint8 index = 0; index < _prediction.length; index++) {
            predictions[tokenId].push(_prediction[index]);
        }
        _tokenIdCounter.increment();
        _setTokenURI(tokenId, uri);
    }

    function mintPublic(Game[] memory _prediction, uint8[3] memory _winnerPrediction) public payable {
        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        require(mintEnabled,"Minting its not allowed");
        require(_prediction.length == TOTAL_GAMES, "There should be a prediction for each game");
        require(msg.value == publicPrice, "Wrong, not exactly amount sent.");
        uint256 tokenId = _tokenIdCounter.current();
        _safeMint(msg.sender, tokenId);
        for (uint8 index = 0; index < _prediction.length; index++) {
            predictions[_tokenIdCounter.current()].push(_prediction[index]);
        }
        winnersPredictions[tokenId] = _winnerPrediction;
        _tokenIdCounter.increment();
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)
        internal
        whenNotPaused
        override(ERC721, ERC721Enumerable)
    {
        super._beforeTokenTransfer(from, to, tokenId, batchSize);
    }

    // The following functions are overrides required by Solidity.

    function _afterTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)
        internal
        override(ERC721)
    {
        super._afterTokenTransfer(from, to, tokenId, batchSize);
    }

    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable, ERC721URIStorage)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    // setRound(1,[[1, 1, 2, [0,0],false],[2, 3, 4, [0,0],false],[3, 5, 6, [0,0],false],[4, 7, 8, [0,0],false]])
    // initializa all in [0,0] 
    function setGames(Game[] memory _games) public onlyOwner returns(bool success)  {
        require(_games.length == TOTAL_GAMES );
        uint8[24] memory ids;
        for (uint8 index = 0; index < _games.length; index++) {
            ids[index] = _games[index].id;
            games[_games[index].id] = _games[index];
        }
        return true;
    }

    function setGameResult(uint8 _gameId, uint8 _team1Score, uint8 _team2Score) public onlyOwner returns (bool success) {
        require(_gameId >0 && _gameId <=24, "The gane ID do not exist ");
        games[_gameId].result[0] = _team1Score;
        games[_gameId].result[1] = _team2Score;
        games[_gameId].set = true;
        return true;
    }

    function getPrediction(uint256 _tokenId) public view returns (Game[] memory){
        return predictions[_tokenId];
    }

    function getWinnerPrediction(uint256 _tokenId) public view returns (uint8[3] memory){
        return winnersPredictions[_tokenId];
    }

    // predictionIds ordered outside, but checking here if they are correct 
    function setPositions(uint256[] memory _predictionsIds, uint256[] memory _predictionsPoints) public onlyOwner returns(bool success){
        require(_predictionsIds.length >0);
        require(_predictionsIds.length == _predictionsPoints.length);

        uint256 maxPoints = MAX_INT;
        for (uint256 index = 0; index < _predictionsPoints.length; index++) {
            require(maxPoints>= _predictionsPoints[index]);
            positions.push(_predictionsIds[index]);
            maxPoints = _predictionsPoints[index];
        } 
        return true; 
    }

    function setWinners(uint8 _first, uint8 _second, uint8 _third) public onlyOwner returns (bool success){
        require(_first>0 && _first < 33, "The first team set does not exist");
        require(_second>0 && _second < 33, "The second team set does not exist");
        require(_third>0 && _third < 33, "The firs third set does not exist");
        require(_first != _second && _first != _third && _second != _third , "There can't be repeated teams");
        winners = [_first, _second, _third];
        return true;

    }

    function getPositions() public view returns (uint256[] memory){
        return positions;
    }

    function calculatePredictionPoints(uint256 _tokenId, uint256 _limit) public view returns (uint256){
        return calculateAllPredictionPoints(_tokenId, _limit) + calculateAllWinnerPoints(winnersPredictions[_tokenId][0],winnersPredictions[_tokenId][1],winnersPredictions[_tokenId][2]);
    }

    function calculateAllWinnerPoints(uint8 _first, uint8 _second, uint8 _third) public view returns(uint256){
        uint8[3] memory memWinners = winners;
        uint256 result;
        if (_first == memWinners[0]){
            result+= 19;
        } else if (_first == memWinners[1] || _first == memWinners[2]) {
            result+= 10;
        }
        if (_second == memWinners[1]){
            result+= 16;
        } else if (_second == memWinners[0] || _second == memWinners[2]) {
            result+= 10;
        }
        if (_third == memWinners[2]){
            result+= 14;
        } else if (_third == memWinners[0] || _third == memWinners[1]) {
            result+= 10;
        }
         
        return result;
    }

    function calculateAllPredictionPoints(uint256 _tokenId, uint256 _limit) public view returns(uint256){
       //  predictions[_tokenId]
        uint256 result;
        for (uint8 index = 0; index < TOTAL_GAMES && index < _limit; index++){
            // result += calculatePoints(_predictions[index],games[_predictions[index].id]);
            result += uint256(calculatePoints(_tokenId,index));
        }
        return result;
    }

    // -- points 
    function calculatePoints(uint256 _tokenId, uint8 _index) public view returns (uint8) {
        
        require(games[predictions[_tokenId][_index].id].set == true, "The result for this gamem was not loaded yet");
        uint8 points = abs (int8(7 - (calculateDiferencePoints( predictions[_tokenId][_index].result[0],games[predictions[_tokenId][_index].id].result[0]) + calculateDiferencePoints(predictions[_tokenId][_index].result[1], games[predictions[_tokenId][_index].id].result[1]))));
        if (getLocalEmpateVisitante(predictions[_tokenId][_index].result[0],predictions[_tokenId][_index].result[1]) == getLocalEmpateVisitante(games[predictions[_tokenId][_index].id].result[0],games[predictions[_tokenId][_index].id].result[0])){
            points += 2;
        }
    
        return points;
    }

    function calculateDiferencePoints(uint8 _goalsP, uint8 _goalsR) public pure returns(uint8){
        return abs(int8(_goalsR) - int8(_goalsP));
    }

    // function getLocalEmpateVisitante(uint8[2] memory _goals) public pure returns(uint8){
    function getLocalEmpateVisitante(uint8 _goalsL, uint8 _goalsV) public pure returns(uint8){
        return (_goalsL > _goalsV) ? LOCAL : (_goalsL == _goalsV) ? EMPATE : VISITANTE;
    }

    function abs(int8 x) public pure returns (uint8) {
        return uint8(x >= 0 ? x : -x);
    }

}